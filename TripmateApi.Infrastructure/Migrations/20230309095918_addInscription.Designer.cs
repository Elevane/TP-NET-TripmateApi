// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TripmateApi.Infrastructure.Contexts;

#nullable disable

namespace TripmateApi.Infrastructure.Migrations
{
    [DbContext(typeof(TripMateSqlContext))]
    [Migration("20230309095918_addInscription")]
    partial class addInscription
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("TripmateApi.Domain.Entities.Inscription", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("TrajetId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TrajetId");

                    b.HasIndex("UserId");

                    b.ToTable("inscriptions", (string)null);
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int>("Pc")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Position");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Step", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("DepartTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int?>("Duration")
                        .HasColumnType("int");

                    b.Property<int?>("InscriptionId")
                        .HasColumnType("int");

                    b.Property<int>("PositionArrivalId")
                        .HasColumnType("int");

                    b.Property<int>("PositionDepartId")
                        .HasColumnType("int");

                    b.Property<int?>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("TrajetId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.HasIndex("InscriptionId");

                    b.HasIndex("PositionArrivalId")
                        .IsUnique();

                    b.HasIndex("PositionDepartId")
                        .IsUnique();

                    b.HasIndex("TrajetId");

                    b.ToTable("step", (string)null);
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Trajet", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int>("DriverId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DriverId");

                    b.HasIndex("Id");

                    b.ToTable("Trajets");
                });

            modelBuilder.Entity("TripmateApi.Entities.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Inscription", b =>
                {
                    b.HasOne("TripmateApi.Domain.Entities.Trajet", "Trajet")
                        .WithMany()
                        .HasForeignKey("TrajetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripmateApi.Entities.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Trajet");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Step", b =>
                {
                    b.HasOne("TripmateApi.Domain.Entities.Inscription", null)
                        .WithMany("Steps")
                        .HasForeignKey("InscriptionId");

                    b.HasOne("TripmateApi.Domain.Entities.Position", "PositionArrival")
                        .WithOne()
                        .HasForeignKey("TripmateApi.Domain.Entities.Step", "PositionArrivalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripmateApi.Domain.Entities.Position", "PositionDepart")
                        .WithOne()
                        .HasForeignKey("TripmateApi.Domain.Entities.Step", "PositionDepartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TripmateApi.Domain.Entities.Trajet", null)
                        .WithMany("Steps")
                        .HasForeignKey("TrajetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PositionArrival");

                    b.Navigation("PositionDepart");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Trajet", b =>
                {
                    b.HasOne("TripmateApi.Entities.Entities.User", "Driver")
                        .WithMany()
                        .HasForeignKey("DriverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Driver");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Inscription", b =>
                {
                    b.Navigation("Steps");
                });

            modelBuilder.Entity("TripmateApi.Domain.Entities.Trajet", b =>
                {
                    b.Navigation("Steps");
                });
#pragma warning restore 612, 618
        }
    }
}
